// source: sense_core_datamodel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sense.AccessPointsReplyMsg', null, global);
goog.exportSymbol('proto.sense.BTFrameMsg', null, global);
goog.exportSymbol('proto.sense.BTFrameMsg.FrameType', null, global);
goog.exportSymbol('proto.sense.BTFramePointMsg', null, global);
goog.exportSymbol('proto.sense.BTFrameTimeSerieMsg', null, global);
goog.exportSymbol('proto.sense.BasicMacMsg', null, global);
goog.exportSymbol('proto.sense.WiFiFrameMsg', null, global);
goog.exportSymbol('proto.sense.WiFiFrameMsg.FrameType', null, global);
goog.exportSymbol('proto.sense.WiFiFramePointMsg', null, global);
goog.exportSymbol('proto.sense.WiFiFrameTimeSerieMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.BasicMacMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.BasicMacMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.BasicMacMsg.displayName = 'proto.sense.BasicMacMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.WiFiFrameMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.WiFiFrameMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.WiFiFrameMsg.displayName = 'proto.sense.WiFiFrameMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.WiFiFramePointMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.WiFiFramePointMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.WiFiFramePointMsg.displayName = 'proto.sense.WiFiFramePointMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.WiFiFrameTimeSerieMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sense.WiFiFrameTimeSerieMsg.repeatedFields_, null);
};
goog.inherits(proto.sense.WiFiFrameTimeSerieMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.WiFiFrameTimeSerieMsg.displayName = 'proto.sense.WiFiFrameTimeSerieMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.AccessPointsReplyMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.AccessPointsReplyMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.AccessPointsReplyMsg.displayName = 'proto.sense.AccessPointsReplyMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.BTFrameMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.BTFrameMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.BTFrameMsg.displayName = 'proto.sense.BTFrameMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.BTFramePointMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.BTFramePointMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.BTFramePointMsg.displayName = 'proto.sense.BTFramePointMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.BTFrameTimeSerieMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sense.BTFrameTimeSerieMsg.repeatedFields_, null);
};
goog.inherits(proto.sense.BTFrameTimeSerieMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.BTFrameTimeSerieMsg.displayName = 'proto.sense.BTFrameTimeSerieMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.BasicMacMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.BasicMacMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.BasicMacMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BasicMacMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vendor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pb_interface: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.BasicMacMsg}
 */
proto.sense.BasicMacMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.BasicMacMsg;
  return proto.sense.BasicMacMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.BasicMacMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.BasicMacMsg}
 */
proto.sense.BasicMacMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.BasicMacMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.BasicMacMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.BasicMacMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BasicMacMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInterface();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string mac = 1;
 * @return {string}
 */
proto.sense.BasicMacMsg.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.BasicMacMsg} returns this
 */
proto.sense.BasicMacMsg.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vendor = 2;
 * @return {string}
 */
proto.sense.BasicMacMsg.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.BasicMacMsg} returns this
 */
proto.sense.BasicMacMsg.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string interface = 3;
 * @return {string}
 */
proto.sense.BasicMacMsg.prototype.getInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.BasicMacMsg} returns this
 */
proto.sense.BasicMacMsg.prototype.setInterface = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.WiFiFrameMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.WiFiFrameMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.WiFiFrameMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFrameMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.sense.BasicMacMsg.toObject(includeInstance, f),
    frame: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ssid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.WiFiFrameMsg}
 */
proto.sense.WiFiFrameMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.WiFiFrameMsg;
  return proto.sense.WiFiFrameMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.WiFiFrameMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.WiFiFrameMsg}
 */
proto.sense.WiFiFrameMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.BasicMacMsg;
      reader.readMessage(value,proto.sense.BasicMacMsg.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.sense.WiFiFrameMsg.FrameType} */ (reader.readEnum());
      msg.setFrame(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRssi(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.WiFiFrameMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.WiFiFrameMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.WiFiFrameMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFrameMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.BasicMacMsg.serializeBinaryToWriter
    );
  }
  f = message.getFrame();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.WiFiFrameMsg.FrameType = {
  UNKNOWN: 0,
  MGMT: 1,
  CTRL: 2,
  DATA: 3,
  RTS: 4,
  CTS: 5,
  ACK: 6,
  OTHER: 7
};

/**
 * optional BasicMacMsg info = 1;
 * @return {?proto.sense.BasicMacMsg}
 */
proto.sense.WiFiFrameMsg.prototype.getInfo = function() {
  return /** @type{?proto.sense.BasicMacMsg} */ (
    jspb.Message.getWrapperField(this, proto.sense.BasicMacMsg, 1));
};


/**
 * @param {?proto.sense.BasicMacMsg|undefined} value
 * @return {!proto.sense.WiFiFrameMsg} returns this
*/
proto.sense.WiFiFrameMsg.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.WiFiFrameMsg} returns this
 */
proto.sense.WiFiFrameMsg.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.WiFiFrameMsg.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FrameType frame = 2;
 * @return {!proto.sense.WiFiFrameMsg.FrameType}
 */
proto.sense.WiFiFrameMsg.prototype.getFrame = function() {
  return /** @type {!proto.sense.WiFiFrameMsg.FrameType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.sense.WiFiFrameMsg.FrameType} value
 * @return {!proto.sense.WiFiFrameMsg} returns this
 */
proto.sense.WiFiFrameMsg.prototype.setFrame = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 rssi = 3;
 * @return {number}
 */
proto.sense.WiFiFrameMsg.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.WiFiFrameMsg} returns this
 */
proto.sense.WiFiFrameMsg.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ssid = 4;
 * @return {string}
 */
proto.sense.WiFiFrameMsg.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.WiFiFrameMsg} returns this
 */
proto.sense.WiFiFrameMsg.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.WiFiFramePointMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.WiFiFramePointMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.WiFiFramePointMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFramePointMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: (f = msg.getFrame()) && proto.sense.WiFiFrameMsg.toObject(includeInstance, f),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.WiFiFramePointMsg}
 */
proto.sense.WiFiFramePointMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.WiFiFramePointMsg;
  return proto.sense.WiFiFramePointMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.WiFiFramePointMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.WiFiFramePointMsg}
 */
proto.sense.WiFiFramePointMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.WiFiFrameMsg;
      reader.readMessage(value,proto.sense.WiFiFrameMsg.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.WiFiFramePointMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.WiFiFramePointMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.WiFiFramePointMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFramePointMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.WiFiFrameMsg.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional WiFiFrameMsg frame = 1;
 * @return {?proto.sense.WiFiFrameMsg}
 */
proto.sense.WiFiFramePointMsg.prototype.getFrame = function() {
  return /** @type{?proto.sense.WiFiFrameMsg} */ (
    jspb.Message.getWrapperField(this, proto.sense.WiFiFrameMsg, 1));
};


/**
 * @param {?proto.sense.WiFiFrameMsg|undefined} value
 * @return {!proto.sense.WiFiFramePointMsg} returns this
*/
proto.sense.WiFiFramePointMsg.prototype.setFrame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.WiFiFramePointMsg} returns this
 */
proto.sense.WiFiFramePointMsg.prototype.clearFrame = function() {
  return this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.WiFiFramePointMsg.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.sense.WiFiFramePointMsg.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.WiFiFramePointMsg} returns this
 */
proto.sense.WiFiFramePointMsg.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sense.WiFiFrameTimeSerieMsg.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.WiFiFrameTimeSerieMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.WiFiFrameTimeSerieMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFrameTimeSerieMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: (f = msg.getFrame()) && proto.sense.WiFiFrameMsg.toObject(includeInstance, f),
    timeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.WiFiFrameTimeSerieMsg}
 */
proto.sense.WiFiFrameTimeSerieMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.WiFiFrameTimeSerieMsg;
  return proto.sense.WiFiFrameTimeSerieMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.WiFiFrameTimeSerieMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.WiFiFrameTimeSerieMsg}
 */
proto.sense.WiFiFrameTimeSerieMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.WiFiFrameMsg;
      reader.readMessage(value,proto.sense.WiFiFrameMsg.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setTimeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.WiFiFrameTimeSerieMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.WiFiFrameTimeSerieMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFrameTimeSerieMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.WiFiFrameMsg.serializeBinaryToWriter
    );
  }
  f = message.getTimeList();
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    );
  }
};


/**
 * optional WiFiFrameMsg frame = 1;
 * @return {?proto.sense.WiFiFrameMsg}
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.getFrame = function() {
  return /** @type{?proto.sense.WiFiFrameMsg} */ (
    jspb.Message.getWrapperField(this, proto.sense.WiFiFrameMsg, 1));
};


/**
 * @param {?proto.sense.WiFiFrameMsg|undefined} value
 * @return {!proto.sense.WiFiFrameTimeSerieMsg} returns this
*/
proto.sense.WiFiFrameTimeSerieMsg.prototype.setFrame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.WiFiFrameTimeSerieMsg} returns this
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.clearFrame = function() {
  return this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint64 time = 3;
 * @return {!Array<number>}
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.getTimeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sense.WiFiFrameTimeSerieMsg} returns this
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.setTimeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sense.WiFiFrameTimeSerieMsg} returns this
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.addTime = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sense.WiFiFrameTimeSerieMsg} returns this
 */
proto.sense.WiFiFrameTimeSerieMsg.prototype.clearTimeList = function() {
  return this.setTimeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.AccessPointsReplyMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.AccessPointsReplyMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.AccessPointsReplyMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.AccessPointsReplyMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.AccessPointsReplyMsg}
 */
proto.sense.AccessPointsReplyMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.AccessPointsReplyMsg;
  return proto.sense.AccessPointsReplyMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.AccessPointsReplyMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.AccessPointsReplyMsg}
 */
proto.sense.AccessPointsReplyMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.AccessPointsReplyMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.AccessPointsReplyMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.AccessPointsReplyMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.AccessPointsReplyMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string ssid = 1;
 * @return {string}
 */
proto.sense.AccessPointsReplyMsg.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.AccessPointsReplyMsg} returns this
 */
proto.sense.AccessPointsReplyMsg.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.sense.AccessPointsReplyMsg.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.AccessPointsReplyMsg} returns this
 */
proto.sense.AccessPointsReplyMsg.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.BTFrameMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.BTFrameMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.BTFrameMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFrameMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.sense.BasicMacMsg.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, ""),
    frame: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.BTFrameMsg}
 */
proto.sense.BTFrameMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.BTFrameMsg;
  return proto.sense.BTFrameMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.BTFrameMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.BTFrameMsg}
 */
proto.sense.BTFrameMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.BasicMacMsg;
      reader.readMessage(value,proto.sense.BasicMacMsg.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {!proto.sense.BTFrameMsg.FrameType} */ (reader.readEnum());
      msg.setFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.BTFrameMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.BTFrameMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.BTFrameMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFrameMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.BasicMacMsg.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFrame();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.BTFrameMsg.FrameType = {
  UNKNOWN: 0,
  PING: 1,
  BLIND: 2
};

/**
 * optional BasicMacMsg info = 1;
 * @return {?proto.sense.BasicMacMsg}
 */
proto.sense.BTFrameMsg.prototype.getInfo = function() {
  return /** @type{?proto.sense.BasicMacMsg} */ (
    jspb.Message.getWrapperField(this, proto.sense.BasicMacMsg, 1));
};


/**
 * @param {?proto.sense.BasicMacMsg|undefined} value
 * @return {!proto.sense.BTFrameMsg} returns this
*/
proto.sense.BTFrameMsg.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.BTFrameMsg} returns this
 */
proto.sense.BTFrameMsg.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.BTFrameMsg.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.sense.BTFrameMsg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.BTFrameMsg} returns this
 */
proto.sense.BTFrameMsg.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.sense.BTFrameMsg.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.BTFrameMsg} returns this
 */
proto.sense.BTFrameMsg.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional FrameType frame = 5;
 * @return {!proto.sense.BTFrameMsg.FrameType}
 */
proto.sense.BTFrameMsg.prototype.getFrame = function() {
  return /** @type {!proto.sense.BTFrameMsg.FrameType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.sense.BTFrameMsg.FrameType} value
 * @return {!proto.sense.BTFrameMsg} returns this
 */
proto.sense.BTFrameMsg.prototype.setFrame = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.BTFramePointMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.BTFramePointMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.BTFramePointMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFramePointMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: (f = msg.getFrame()) && proto.sense.BTFrameMsg.toObject(includeInstance, f),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.BTFramePointMsg}
 */
proto.sense.BTFramePointMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.BTFramePointMsg;
  return proto.sense.BTFramePointMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.BTFramePointMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.BTFramePointMsg}
 */
proto.sense.BTFramePointMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.BTFrameMsg;
      reader.readMessage(value,proto.sense.BTFrameMsg.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.BTFramePointMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.BTFramePointMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.BTFramePointMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFramePointMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.BTFrameMsg.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional BTFrameMsg frame = 1;
 * @return {?proto.sense.BTFrameMsg}
 */
proto.sense.BTFramePointMsg.prototype.getFrame = function() {
  return /** @type{?proto.sense.BTFrameMsg} */ (
    jspb.Message.getWrapperField(this, proto.sense.BTFrameMsg, 1));
};


/**
 * @param {?proto.sense.BTFrameMsg|undefined} value
 * @return {!proto.sense.BTFramePointMsg} returns this
*/
proto.sense.BTFramePointMsg.prototype.setFrame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.BTFramePointMsg} returns this
 */
proto.sense.BTFramePointMsg.prototype.clearFrame = function() {
  return this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.BTFramePointMsg.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 time = 2;
 * @return {number}
 */
proto.sense.BTFramePointMsg.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.BTFramePointMsg} returns this
 */
proto.sense.BTFramePointMsg.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sense.BTFrameTimeSerieMsg.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.BTFrameTimeSerieMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.BTFrameTimeSerieMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.BTFrameTimeSerieMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFrameTimeSerieMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: (f = msg.getFrame()) && proto.sense.BTFrameMsg.toObject(includeInstance, f),
    timeList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.BTFrameTimeSerieMsg}
 */
proto.sense.BTFrameTimeSerieMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.BTFrameTimeSerieMsg;
  return proto.sense.BTFrameTimeSerieMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.BTFrameTimeSerieMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.BTFrameTimeSerieMsg}
 */
proto.sense.BTFrameTimeSerieMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.BTFrameMsg;
      reader.readMessage(value,proto.sense.BTFrameMsg.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setTimeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.BTFrameTimeSerieMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.BTFrameTimeSerieMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.BTFrameTimeSerieMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFrameTimeSerieMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.BTFrameMsg.serializeBinaryToWriter
    );
  }
  f = message.getTimeList();
  if (f.length > 0) {
    writer.writePackedUint64(
      5,
      f
    );
  }
};


/**
 * optional BTFrameMsg frame = 1;
 * @return {?proto.sense.BTFrameMsg}
 */
proto.sense.BTFrameTimeSerieMsg.prototype.getFrame = function() {
  return /** @type{?proto.sense.BTFrameMsg} */ (
    jspb.Message.getWrapperField(this, proto.sense.BTFrameMsg, 1));
};


/**
 * @param {?proto.sense.BTFrameMsg|undefined} value
 * @return {!proto.sense.BTFrameTimeSerieMsg} returns this
*/
proto.sense.BTFrameTimeSerieMsg.prototype.setFrame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.BTFrameTimeSerieMsg} returns this
 */
proto.sense.BTFrameTimeSerieMsg.prototype.clearFrame = function() {
  return this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.BTFrameTimeSerieMsg.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint64 time = 5;
 * @return {!Array<number>}
 */
proto.sense.BTFrameTimeSerieMsg.prototype.getTimeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.sense.BTFrameTimeSerieMsg} returns this
 */
proto.sense.BTFrameTimeSerieMsg.prototype.setTimeList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.sense.BTFrameTimeSerieMsg} returns this
 */
proto.sense.BTFrameTimeSerieMsg.prototype.addTime = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sense.BTFrameTimeSerieMsg} returns this
 */
proto.sense.BTFrameTimeSerieMsg.prototype.clearTimeList = function() {
  return this.setTimeList([]);
};


goog.object.extend(exports, proto.sense);
