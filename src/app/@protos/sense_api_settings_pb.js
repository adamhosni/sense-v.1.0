// source: sense_api_settings.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.sense.DeviceConfigMessage', null, global);
goog.exportSymbol('proto.sense.DeviceConfigMessage.Config', null, global);
goog.exportSymbol('proto.sense.DeviceConfigMessage.DeviceParametersCase', null, global);
goog.exportSymbol('proto.sense.DeviceDiagnosticsMessage', null, global);
goog.exportSymbol('proto.sense.DeviceEthernetConfig', null, global);
goog.exportSymbol('proto.sense.DeviceInfoMessage', null, global);
goog.exportSymbol('proto.sense.DeviceLTE4GConfig', null, global);
goog.exportSymbol('proto.sense.DeviceLTE4GConfig.Status', null, global);
goog.exportSymbol('proto.sense.DeviceLocationConfig', null, global);
goog.exportSymbol('proto.sense.DeviceNTPConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceInfoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceInfoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceInfoMessage.displayName = 'proto.sense.DeviceInfoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceDiagnosticsMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceDiagnosticsMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceDiagnosticsMessage.displayName = 'proto.sense.DeviceDiagnosticsMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceEthernetConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceEthernetConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceEthernetConfig.displayName = 'proto.sense.DeviceEthernetConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceLTE4GConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceLTE4GConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceLTE4GConfig.displayName = 'proto.sense.DeviceLTE4GConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceLocationConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceLocationConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceLocationConfig.displayName = 'proto.sense.DeviceLocationConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceNTPConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sense.DeviceNTPConfig.repeatedFields_, null);
};
goog.inherits(proto.sense.DeviceNTPConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceNTPConfig.displayName = 'proto.sense.DeviceNTPConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceConfigMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sense.DeviceConfigMessage.oneofGroups_);
};
goog.inherits(proto.sense.DeviceConfigMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceConfigMessage.displayName = 'proto.sense.DeviceConfigMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceInfoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceInfoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceInfoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceInfoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicefirmwareversion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    issetting: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceInfoMessage}
 */
proto.sense.DeviceInfoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceInfoMessage;
  return proto.sense.DeviceInfoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceInfoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceInfoMessage}
 */
proto.sense.DeviceInfoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicefirmwareversion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssetting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceInfoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceInfoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceInfoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceInfoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicefirmwareversion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIssetting();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string DeviceName = 1;
 * @return {string}
 */
proto.sense.DeviceInfoMessage.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceInfoMessage} returns this
 */
proto.sense.DeviceInfoMessage.prototype.setDevicename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string DeviceID = 2;
 * @return {string}
 */
proto.sense.DeviceInfoMessage.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceInfoMessage} returns this
 */
proto.sense.DeviceInfoMessage.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string DeviceFirmwareVersion = 3;
 * @return {string}
 */
proto.sense.DeviceInfoMessage.prototype.getDevicefirmwareversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceInfoMessage} returns this
 */
proto.sense.DeviceInfoMessage.prototype.setDevicefirmwareversion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool isSetting = 4;
 * @return {boolean}
 */
proto.sense.DeviceInfoMessage.prototype.getIssetting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.DeviceInfoMessage} returns this
 */
proto.sense.DeviceInfoMessage.prototype.setIssetting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceDiagnosticsMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceDiagnosticsMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceDiagnosticsMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    cputemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    internaltemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    externaltemp: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    exthumidity: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    cpuperf: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    ramusage: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    humiditylvl: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    hddusage: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    pressure: jspb.Message.getFieldWithDefault(msg, 9, 0),
    poeamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    poevolt: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    sysamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    sysvolt: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    jackamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    jackvolt: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    piceamp: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    pcievolt: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceDiagnosticsMessage}
 */
proto.sense.DeviceDiagnosticsMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceDiagnosticsMessage;
  return proto.sense.DeviceDiagnosticsMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceDiagnosticsMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceDiagnosticsMessage}
 */
proto.sense.DeviceDiagnosticsMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCputemp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInternaltemp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setExternaltemp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setExthumidity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCpuperf(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRamusage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHumiditylvl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHddusage(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPressure(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPoeamp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPoevolt(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSysamp(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSysvolt(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setJackamp(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setJackvolt(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPiceamp(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPcievolt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceDiagnosticsMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceDiagnosticsMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceDiagnosticsMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCputemp();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getInternaltemp();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getExternaltemp();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getExthumidity();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCpuperf();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRamusage();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getHumiditylvl();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getHddusage();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getPoeamp();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getPoevolt();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getSysamp();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getSysvolt();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getJackamp();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getJackvolt();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getPiceamp();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getPcievolt();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
};


/**
 * optional float CPUTemp = 1;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getCputemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setCputemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float InternalTemp = 2;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getInternaltemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setInternaltemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float ExternalTemp = 3;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getExternaltemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setExternaltemp = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float ExtHumidity = 4;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getExthumidity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setExthumidity = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float CPUPerf = 5;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getCpuperf = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setCpuperf = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float RAMUsage = 6;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getRamusage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setRamusage = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float HumidityLvl = 7;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getHumiditylvl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setHumiditylvl = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float HDDUsage = 8;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getHddusage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setHddusage = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional int32 Pressure = 9;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setPressure = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional float POEAmp = 10;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getPoeamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setPoeamp = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float POEVolt = 11;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getPoevolt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setPoevolt = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float SysAmp = 12;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getSysamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setSysamp = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float SysVolt = 13;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getSysvolt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setSysvolt = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float JackAmp = 14;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getJackamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setJackamp = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float JackVolt = 15;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getJackvolt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setJackvolt = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float PICeAmp = 16;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getPiceamp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setPiceamp = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float PCIeVolt = 17;
 * @return {number}
 */
proto.sense.DeviceDiagnosticsMessage.prototype.getPcievolt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceDiagnosticsMessage} returns this
 */
proto.sense.DeviceDiagnosticsMessage.prototype.setPcievolt = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceEthernetConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceEthernetConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceEthernetConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceEthernetConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    dhcpusage: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    macaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ipv4address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subnetmask: jspb.Message.getFieldWithDefault(msg, 4, ""),
    arrayDns: jspb.Message.getFieldWithDefault(msg, 5, ""),
    gateway: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceEthernetConfig}
 */
proto.sense.DeviceEthernetConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceEthernetConfig;
  return proto.sense.DeviceEthernetConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceEthernetConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceEthernetConfig}
 */
proto.sense.DeviceEthernetConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDhcpusage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMacaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpv4address(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubnetmask(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setArrayDns(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceEthernetConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceEthernetConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceEthernetConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceEthernetConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDhcpusage();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMacaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIpv4address();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubnetmask();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArrayDns();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional bool DHCPUsage = 1;
 * @return {boolean}
 */
proto.sense.DeviceEthernetConfig.prototype.getDhcpusage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.DeviceEthernetConfig} returns this
 */
proto.sense.DeviceEthernetConfig.prototype.setDhcpusage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string MACAddress = 2;
 * @return {string}
 */
proto.sense.DeviceEthernetConfig.prototype.getMacaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceEthernetConfig} returns this
 */
proto.sense.DeviceEthernetConfig.prototype.setMacaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string IPv4Address = 3;
 * @return {string}
 */
proto.sense.DeviceEthernetConfig.prototype.getIpv4address = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceEthernetConfig} returns this
 */
proto.sense.DeviceEthernetConfig.prototype.setIpv4address = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string SubnetMask = 4;
 * @return {string}
 */
proto.sense.DeviceEthernetConfig.prototype.getSubnetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceEthernetConfig} returns this
 */
proto.sense.DeviceEthernetConfig.prototype.setSubnetmask = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Array_DNS = 5;
 * @return {string}
 */
proto.sense.DeviceEthernetConfig.prototype.getArrayDns = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceEthernetConfig} returns this
 */
proto.sense.DeviceEthernetConfig.prototype.setArrayDns = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Gateway = 6;
 * @return {string}
 */
proto.sense.DeviceEthernetConfig.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceEthernetConfig} returns this
 */
proto.sense.DeviceEthernetConfig.prototype.setGateway = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceLTE4GConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceLTE4GConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceLTE4GConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceLTE4GConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    status4g: jspb.Message.getFieldWithDefault(msg, 1, 0),
    country: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operator: jspb.Message.getFieldWithDefault(msg, 3, ""),
    apn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    username: jspb.Message.getFieldWithDefault(msg, 5, ""),
    password: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pincode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceLTE4GConfig}
 */
proto.sense.DeviceLTE4GConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceLTE4GConfig;
  return proto.sense.DeviceLTE4GConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceLTE4GConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceLTE4GConfig}
 */
proto.sense.DeviceLTE4GConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sense.DeviceLTE4GConfig.Status} */ (reader.readEnum());
      msg.setStatus4g(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperator(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setApn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPincode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceLTE4GConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceLTE4GConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceLTE4GConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceLTE4GConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus4g();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperator();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getApn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPincode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.DeviceLTE4GConfig.Status = {
  NONE: 0,
  ONLINE: 1,
  OFFLINE: 2
};

/**
 * optional Status Status4G = 1;
 * @return {!proto.sense.DeviceLTE4GConfig.Status}
 */
proto.sense.DeviceLTE4GConfig.prototype.getStatus4g = function() {
  return /** @type {!proto.sense.DeviceLTE4GConfig.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sense.DeviceLTE4GConfig.Status} value
 * @return {!proto.sense.DeviceLTE4GConfig} returns this
 */
proto.sense.DeviceLTE4GConfig.prototype.setStatus4g = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Country = 2;
 * @return {string}
 */
proto.sense.DeviceLTE4GConfig.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceLTE4GConfig} returns this
 */
proto.sense.DeviceLTE4GConfig.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Operator = 3;
 * @return {string}
 */
proto.sense.DeviceLTE4GConfig.prototype.getOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceLTE4GConfig} returns this
 */
proto.sense.DeviceLTE4GConfig.prototype.setOperator = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string APN = 4;
 * @return {string}
 */
proto.sense.DeviceLTE4GConfig.prototype.getApn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceLTE4GConfig} returns this
 */
proto.sense.DeviceLTE4GConfig.prototype.setApn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Username = 5;
 * @return {string}
 */
proto.sense.DeviceLTE4GConfig.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceLTE4GConfig} returns this
 */
proto.sense.DeviceLTE4GConfig.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Password = 6;
 * @return {string}
 */
proto.sense.DeviceLTE4GConfig.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceLTE4GConfig} returns this
 */
proto.sense.DeviceLTE4GConfig.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string PINCode = 7;
 * @return {string}
 */
proto.sense.DeviceLTE4GConfig.prototype.getPincode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceLTE4GConfig} returns this
 */
proto.sense.DeviceLTE4GConfig.prototype.setPincode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceLocationConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceLocationConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceLocationConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceLocationConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, ""),
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    auto: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceLocationConfig}
 */
proto.sense.DeviceLocationConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceLocationConfig;
  return proto.sense.DeviceLocationConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceLocationConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceLocationConfig}
 */
proto.sense.DeviceLocationConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceLocationConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceLocationConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceLocationConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceLocationConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getAuto();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string Position = 1;
 * @return {string}
 */
proto.sense.DeviceLocationConfig.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceLocationConfig} returns this
 */
proto.sense.DeviceLocationConfig.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double Latitude = 2;
 * @return {number}
 */
proto.sense.DeviceLocationConfig.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceLocationConfig} returns this
 */
proto.sense.DeviceLocationConfig.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double Longitude = 3;
 * @return {number}
 */
proto.sense.DeviceLocationConfig.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceLocationConfig} returns this
 */
proto.sense.DeviceLocationConfig.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double Height = 4;
 * @return {number}
 */
proto.sense.DeviceLocationConfig.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceLocationConfig} returns this
 */
proto.sense.DeviceLocationConfig.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool Auto = 5;
 * @return {boolean}
 */
proto.sense.DeviceLocationConfig.prototype.getAuto = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.DeviceLocationConfig} returns this
 */
proto.sense.DeviceLocationConfig.prototype.setAuto = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sense.DeviceNTPConfig.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceNTPConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceNTPConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceNTPConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceNTPConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    ntphostsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    ntpfallbackList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    rootdistancemaxsec: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pollintervalminsec: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pollintervalmaxsec: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceNTPConfig}
 */
proto.sense.DeviceNTPConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceNTPConfig;
  return proto.sense.DeviceNTPConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceNTPConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceNTPConfig}
 */
proto.sense.DeviceNTPConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNtphosts(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addNtpfallback(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRootdistancemaxsec(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPollintervalminsec(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPollintervalmaxsec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceNTPConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceNTPConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceNTPConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceNTPConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNtphostsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getNtpfallbackList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getRootdistancemaxsec();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPollintervalminsec();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPollintervalmaxsec();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated string NTPHosts = 1;
 * @return {!Array<string>}
 */
proto.sense.DeviceNTPConfig.prototype.getNtphostsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.setNtphostsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.addNtphosts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.clearNtphostsList = function() {
  return this.setNtphostsList([]);
};


/**
 * repeated string NTPFallback = 2;
 * @return {!Array<string>}
 */
proto.sense.DeviceNTPConfig.prototype.getNtpfallbackList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.setNtpfallbackList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.addNtpfallback = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.clearNtpfallbackList = function() {
  return this.setNtpfallbackList([]);
};


/**
 * optional uint32 RootDistanceMaxSec = 3;
 * @return {number}
 */
proto.sense.DeviceNTPConfig.prototype.getRootdistancemaxsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.setRootdistancemaxsec = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 PollIntervalMinSec = 4;
 * @return {number}
 */
proto.sense.DeviceNTPConfig.prototype.getPollintervalminsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.setPollintervalminsec = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 PollIntervalMaxSec = 5;
 * @return {number}
 */
proto.sense.DeviceNTPConfig.prototype.getPollintervalmaxsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceNTPConfig} returns this
 */
proto.sense.DeviceNTPConfig.prototype.setPollintervalmaxsec = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sense.DeviceConfigMessage.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.sense.DeviceConfigMessage.DeviceParametersCase = {
  DEVICE_PARAMETERS_NOT_SET: 0,
  DEVICE_ETHERNET_CONFIG: 2,
  DEVICE_LTE4G_CONFIG: 3,
  DEVICE_LOCATION_CONFIG: 4,
  DEVICE_NTP_CONFIG: 5
};

/**
 * @return {proto.sense.DeviceConfigMessage.DeviceParametersCase}
 */
proto.sense.DeviceConfigMessage.prototype.getDeviceParametersCase = function() {
  return /** @type {proto.sense.DeviceConfigMessage.DeviceParametersCase} */(jspb.Message.computeOneofCase(this, proto.sense.DeviceConfigMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceConfigMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceConfigMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceConfigMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceConfigMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceConfig: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deviceEthernetConfig: (f = msg.getDeviceEthernetConfig()) && proto.sense.DeviceEthernetConfig.toObject(includeInstance, f),
    deviceLte4gConfig: (f = msg.getDeviceLte4gConfig()) && proto.sense.DeviceLTE4GConfig.toObject(includeInstance, f),
    deviceLocationConfig: (f = msg.getDeviceLocationConfig()) && proto.sense.DeviceLocationConfig.toObject(includeInstance, f),
    deviceNtpConfig: (f = msg.getDeviceNtpConfig()) && proto.sense.DeviceNTPConfig.toObject(includeInstance, f),
    issetting: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceConfigMessage}
 */
proto.sense.DeviceConfigMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceConfigMessage;
  return proto.sense.DeviceConfigMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceConfigMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceConfigMessage}
 */
proto.sense.DeviceConfigMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sense.DeviceConfigMessage.Config} */ (reader.readEnum());
      msg.setDeviceConfig(value);
      break;
    case 2:
      var value = new proto.sense.DeviceEthernetConfig;
      reader.readMessage(value,proto.sense.DeviceEthernetConfig.deserializeBinaryFromReader);
      msg.setDeviceEthernetConfig(value);
      break;
    case 3:
      var value = new proto.sense.DeviceLTE4GConfig;
      reader.readMessage(value,proto.sense.DeviceLTE4GConfig.deserializeBinaryFromReader);
      msg.setDeviceLte4gConfig(value);
      break;
    case 4:
      var value = new proto.sense.DeviceLocationConfig;
      reader.readMessage(value,proto.sense.DeviceLocationConfig.deserializeBinaryFromReader);
      msg.setDeviceLocationConfig(value);
      break;
    case 5:
      var value = new proto.sense.DeviceNTPConfig;
      reader.readMessage(value,proto.sense.DeviceNTPConfig.deserializeBinaryFromReader);
      msg.setDeviceNtpConfig(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssetting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceConfigMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceConfigMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceConfigMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceConfigMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceConfig();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDeviceEthernetConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sense.DeviceEthernetConfig.serializeBinaryToWriter
    );
  }
  f = message.getDeviceLte4gConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sense.DeviceLTE4GConfig.serializeBinaryToWriter
    );
  }
  f = message.getDeviceLocationConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sense.DeviceLocationConfig.serializeBinaryToWriter
    );
  }
  f = message.getDeviceNtpConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sense.DeviceNTPConfig.serializeBinaryToWriter
    );
  }
  f = message.getIssetting();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.DeviceConfigMessage.Config = {
  NONE: 0,
  ETHERNET: 1,
  LTE4G: 2,
  LOCATION: 3,
  NTP: 4
};

/**
 * optional Config device_config = 1;
 * @return {!proto.sense.DeviceConfigMessage.Config}
 */
proto.sense.DeviceConfigMessage.prototype.getDeviceConfig = function() {
  return /** @type {!proto.sense.DeviceConfigMessage.Config} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sense.DeviceConfigMessage.Config} value
 * @return {!proto.sense.DeviceConfigMessage} returns this
 */
proto.sense.DeviceConfigMessage.prototype.setDeviceConfig = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional DeviceEthernetConfig device_ethernet_config = 2;
 * @return {?proto.sense.DeviceEthernetConfig}
 */
proto.sense.DeviceConfigMessage.prototype.getDeviceEthernetConfig = function() {
  return /** @type{?proto.sense.DeviceEthernetConfig} */ (
    jspb.Message.getWrapperField(this, proto.sense.DeviceEthernetConfig, 2));
};


/**
 * @param {?proto.sense.DeviceEthernetConfig|undefined} value
 * @return {!proto.sense.DeviceConfigMessage} returns this
*/
proto.sense.DeviceConfigMessage.prototype.setDeviceEthernetConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.sense.DeviceConfigMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.DeviceConfigMessage} returns this
 */
proto.sense.DeviceConfigMessage.prototype.clearDeviceEthernetConfig = function() {
  return this.setDeviceEthernetConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.DeviceConfigMessage.prototype.hasDeviceEthernetConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeviceLTE4GConfig device_lte4g_config = 3;
 * @return {?proto.sense.DeviceLTE4GConfig}
 */
proto.sense.DeviceConfigMessage.prototype.getDeviceLte4gConfig = function() {
  return /** @type{?proto.sense.DeviceLTE4GConfig} */ (
    jspb.Message.getWrapperField(this, proto.sense.DeviceLTE4GConfig, 3));
};


/**
 * @param {?proto.sense.DeviceLTE4GConfig|undefined} value
 * @return {!proto.sense.DeviceConfigMessage} returns this
*/
proto.sense.DeviceConfigMessage.prototype.setDeviceLte4gConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.sense.DeviceConfigMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.DeviceConfigMessage} returns this
 */
proto.sense.DeviceConfigMessage.prototype.clearDeviceLte4gConfig = function() {
  return this.setDeviceLte4gConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.DeviceConfigMessage.prototype.hasDeviceLte4gConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeviceLocationConfig device_location_config = 4;
 * @return {?proto.sense.DeviceLocationConfig}
 */
proto.sense.DeviceConfigMessage.prototype.getDeviceLocationConfig = function() {
  return /** @type{?proto.sense.DeviceLocationConfig} */ (
    jspb.Message.getWrapperField(this, proto.sense.DeviceLocationConfig, 4));
};


/**
 * @param {?proto.sense.DeviceLocationConfig|undefined} value
 * @return {!proto.sense.DeviceConfigMessage} returns this
*/
proto.sense.DeviceConfigMessage.prototype.setDeviceLocationConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.sense.DeviceConfigMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.DeviceConfigMessage} returns this
 */
proto.sense.DeviceConfigMessage.prototype.clearDeviceLocationConfig = function() {
  return this.setDeviceLocationConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.DeviceConfigMessage.prototype.hasDeviceLocationConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DeviceNTPConfig device_ntp_config = 5;
 * @return {?proto.sense.DeviceNTPConfig}
 */
proto.sense.DeviceConfigMessage.prototype.getDeviceNtpConfig = function() {
  return /** @type{?proto.sense.DeviceNTPConfig} */ (
    jspb.Message.getWrapperField(this, proto.sense.DeviceNTPConfig, 5));
};


/**
 * @param {?proto.sense.DeviceNTPConfig|undefined} value
 * @return {!proto.sense.DeviceConfigMessage} returns this
*/
proto.sense.DeviceConfigMessage.prototype.setDeviceNtpConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.sense.DeviceConfigMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.DeviceConfigMessage} returns this
 */
proto.sense.DeviceConfigMessage.prototype.clearDeviceNtpConfig = function() {
  return this.setDeviceNtpConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.DeviceConfigMessage.prototype.hasDeviceNtpConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool isSetting = 6;
 * @return {boolean}
 */
proto.sense.DeviceConfigMessage.prototype.getIssetting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.DeviceConfigMessage} returns this
 */
proto.sense.DeviceConfigMessage.prototype.setIssetting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


goog.object.extend(exports, proto.sense);
