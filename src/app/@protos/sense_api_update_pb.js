// source: sense_api_update.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.sense.DeviceUpdateAutoMessage', null, global);
goog.exportSymbol('proto.sense.DeviceUpdateConfigMessage', null, global);
goog.exportSymbol('proto.sense.DeviceUpdateHostMessage', null, global);
goog.exportSymbol('proto.sense.DeviceUpdateProgressMessage', null, global);
goog.exportSymbol('proto.sense.DeviceUpdateProgressMessage.status', null, global);
goog.exportSymbol('proto.sense.DeviceUpdateTriggerMessage', null, global);
goog.exportSymbol('proto.sense.DeviceUpdateTriggerMessage.trigger_type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceUpdateConfigMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceUpdateConfigMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceUpdateConfigMessage.displayName = 'proto.sense.DeviceUpdateConfigMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceUpdateHostMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceUpdateHostMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceUpdateHostMessage.displayName = 'proto.sense.DeviceUpdateHostMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceUpdateAutoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceUpdateAutoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceUpdateAutoMessage.displayName = 'proto.sense.DeviceUpdateAutoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceUpdateProgressMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceUpdateProgressMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceUpdateProgressMessage.displayName = 'proto.sense.DeviceUpdateProgressMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.DeviceUpdateTriggerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.DeviceUpdateTriggerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.DeviceUpdateTriggerMessage.displayName = 'proto.sense.DeviceUpdateTriggerMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceUpdateConfigMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceUpdateConfigMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceUpdateConfigMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateConfigMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoUpdate: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    serverhost: jspb.Message.getFieldWithDefault(msg, 2, ""),
    curversion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    newversion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    updatetime: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceUpdateConfigMessage}
 */
proto.sense.DeviceUpdateConfigMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceUpdateConfigMessage;
  return proto.sense.DeviceUpdateConfigMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceUpdateConfigMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceUpdateConfigMessage}
 */
proto.sense.DeviceUpdateConfigMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoUpdate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerhost(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurversion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewversion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpdatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceUpdateConfigMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceUpdateConfigMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceUpdateConfigMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateConfigMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutoUpdate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getServerhost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurversion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNewversion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUpdatetime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional bool auto_update = 1;
 * @return {boolean}
 */
proto.sense.DeviceUpdateConfigMessage.prototype.getAutoUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.DeviceUpdateConfigMessage} returns this
 */
proto.sense.DeviceUpdateConfigMessage.prototype.setAutoUpdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string serverHost = 2;
 * @return {string}
 */
proto.sense.DeviceUpdateConfigMessage.prototype.getServerhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceUpdateConfigMessage} returns this
 */
proto.sense.DeviceUpdateConfigMessage.prototype.setServerhost = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string curVersion = 3;
 * @return {string}
 */
proto.sense.DeviceUpdateConfigMessage.prototype.getCurversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceUpdateConfigMessage} returns this
 */
proto.sense.DeviceUpdateConfigMessage.prototype.setCurversion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string newVersion = 4;
 * @return {string}
 */
proto.sense.DeviceUpdateConfigMessage.prototype.getNewversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceUpdateConfigMessage} returns this
 */
proto.sense.DeviceUpdateConfigMessage.prototype.setNewversion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 updateTime = 5;
 * @return {number}
 */
proto.sense.DeviceUpdateConfigMessage.prototype.getUpdatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceUpdateConfigMessage} returns this
 */
proto.sense.DeviceUpdateConfigMessage.prototype.setUpdatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceUpdateHostMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceUpdateHostMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceUpdateHostMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateHostMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverhost: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceUpdateHostMessage}
 */
proto.sense.DeviceUpdateHostMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceUpdateHostMessage;
  return proto.sense.DeviceUpdateHostMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceUpdateHostMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceUpdateHostMessage}
 */
proto.sense.DeviceUpdateHostMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerhost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceUpdateHostMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceUpdateHostMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceUpdateHostMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateHostMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerhost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string serverHost = 1;
 * @return {string}
 */
proto.sense.DeviceUpdateHostMessage.prototype.getServerhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceUpdateHostMessage} returns this
 */
proto.sense.DeviceUpdateHostMessage.prototype.setServerhost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceUpdateAutoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceUpdateAutoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceUpdateAutoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateAutoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoUpdate: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceUpdateAutoMessage}
 */
proto.sense.DeviceUpdateAutoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceUpdateAutoMessage;
  return proto.sense.DeviceUpdateAutoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceUpdateAutoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceUpdateAutoMessage}
 */
proto.sense.DeviceUpdateAutoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceUpdateAutoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceUpdateAutoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceUpdateAutoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateAutoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutoUpdate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool auto_update = 1;
 * @return {boolean}
 */
proto.sense.DeviceUpdateAutoMessage.prototype.getAutoUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.DeviceUpdateAutoMessage} returns this
 */
proto.sense.DeviceUpdateAutoMessage.prototype.setAutoUpdate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceUpdateProgressMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceUpdateProgressMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceUpdateProgressMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateProgressMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatesize: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    updateprogress: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatestatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    curversion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    newversion: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceUpdateProgressMessage}
 */
proto.sense.DeviceUpdateProgressMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceUpdateProgressMessage;
  return proto.sense.DeviceUpdateProgressMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceUpdateProgressMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceUpdateProgressMessage}
 */
proto.sense.DeviceUpdateProgressMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUpdatesize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpdateprogress(value);
      break;
    case 3:
      var value = /** @type {!proto.sense.DeviceUpdateProgressMessage.status} */ (reader.readEnum());
      msg.setUpdatestatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurversion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceUpdateProgressMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceUpdateProgressMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceUpdateProgressMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateProgressMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatesize();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getUpdateprogress();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUpdatestatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCurversion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNewversion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.DeviceUpdateProgressMessage.status = {
  NONE: 0,
  PEND: 1,
  DOWN: 2,
  WIP: 3,
  DONE: 4,
  STOP: 5
};

/**
 * optional float updateSize = 1;
 * @return {number}
 */
proto.sense.DeviceUpdateProgressMessage.prototype.getUpdatesize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceUpdateProgressMessage} returns this
 */
proto.sense.DeviceUpdateProgressMessage.prototype.setUpdatesize = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 updateProgress = 2;
 * @return {number}
 */
proto.sense.DeviceUpdateProgressMessage.prototype.getUpdateprogress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.DeviceUpdateProgressMessage} returns this
 */
proto.sense.DeviceUpdateProgressMessage.prototype.setUpdateprogress = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional status updateStatus = 3;
 * @return {!proto.sense.DeviceUpdateProgressMessage.status}
 */
proto.sense.DeviceUpdateProgressMessage.prototype.getUpdatestatus = function() {
  return /** @type {!proto.sense.DeviceUpdateProgressMessage.status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.sense.DeviceUpdateProgressMessage.status} value
 * @return {!proto.sense.DeviceUpdateProgressMessage} returns this
 */
proto.sense.DeviceUpdateProgressMessage.prototype.setUpdatestatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string curVersion = 4;
 * @return {string}
 */
proto.sense.DeviceUpdateProgressMessage.prototype.getCurversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceUpdateProgressMessage} returns this
 */
proto.sense.DeviceUpdateProgressMessage.prototype.setCurversion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string newVersion = 5;
 * @return {string}
 */
proto.sense.DeviceUpdateProgressMessage.prototype.getNewversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceUpdateProgressMessage} returns this
 */
proto.sense.DeviceUpdateProgressMessage.prototype.setNewversion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.DeviceUpdateTriggerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.DeviceUpdateTriggerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.DeviceUpdateTriggerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateTriggerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    trigger: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updatepath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.DeviceUpdateTriggerMessage}
 */
proto.sense.DeviceUpdateTriggerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.DeviceUpdateTriggerMessage;
  return proto.sense.DeviceUpdateTriggerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.DeviceUpdateTriggerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.DeviceUpdateTriggerMessage}
 */
proto.sense.DeviceUpdateTriggerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sense.DeviceUpdateTriggerMessage.trigger_type} */ (reader.readEnum());
      msg.setTrigger(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.DeviceUpdateTriggerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.DeviceUpdateTriggerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.DeviceUpdateTriggerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.DeviceUpdateTriggerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrigger();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUpdatepath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.DeviceUpdateTriggerMessage.trigger_type = {
  NONE: 0,
  CHECK: 1,
  UPGRADE: 2,
  FILE: 3,
  URL: 4
};

/**
 * optional trigger_type trigger = 1;
 * @return {!proto.sense.DeviceUpdateTriggerMessage.trigger_type}
 */
proto.sense.DeviceUpdateTriggerMessage.prototype.getTrigger = function() {
  return /** @type {!proto.sense.DeviceUpdateTriggerMessage.trigger_type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.sense.DeviceUpdateTriggerMessage.trigger_type} value
 * @return {!proto.sense.DeviceUpdateTriggerMessage} returns this
 */
proto.sense.DeviceUpdateTriggerMessage.prototype.setTrigger = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string updatePath = 2;
 * @return {string}
 */
proto.sense.DeviceUpdateTriggerMessage.prototype.getUpdatepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.DeviceUpdateTriggerMessage} returns this
 */
proto.sense.DeviceUpdateTriggerMessage.prototype.setUpdatepath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.sense);
