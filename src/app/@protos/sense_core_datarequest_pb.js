// source: sense_core_datarequest.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sense.APQuery', null, global);
goog.exportSymbol('proto.sense.APQuery.SortKey', null, global);
goog.exportSymbol('proto.sense.BTFrameQuery', null, global);
goog.exportSymbol('proto.sense.BTFrameQuery.FrameType', null, global);
goog.exportSymbol('proto.sense.BTFrameQuery.SortKey', null, global);
goog.exportSymbol('proto.sense.ItemQuery', null, global);
goog.exportSymbol('proto.sense.ItemQuery.KeylistCase', null, global);
goog.exportSymbol('proto.sense.TimeRange', null, global);
goog.exportSymbol('proto.sense.WiFiFrameQuery', null, global);
goog.exportSymbol('proto.sense.WiFiFrameQuery.FrameType', null, global);
goog.exportSymbol('proto.sense.WiFiFrameQuery.SortKey', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.TimeRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.TimeRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.TimeRange.displayName = 'proto.sense.TimeRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.ItemQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sense.ItemQuery.oneofGroups_);
};
goog.inherits(proto.sense.ItemQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.ItemQuery.displayName = 'proto.sense.ItemQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.WiFiFrameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.WiFiFrameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.WiFiFrameQuery.displayName = 'proto.sense.WiFiFrameQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.APQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.APQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.APQuery.displayName = 'proto.sense.APQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sense.BTFrameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sense.BTFrameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sense.BTFrameQuery.displayName = 'proto.sense.BTFrameQuery';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.TimeRange.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.TimeRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.TimeRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.TimeRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromepochms: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toepochms: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.TimeRange}
 */
proto.sense.TimeRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.TimeRange;
  return proto.sense.TimeRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.TimeRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.TimeRange}
 */
proto.sense.TimeRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromepochms(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToepochms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.TimeRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.TimeRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.TimeRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.TimeRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromepochms();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToepochms();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 fromEpochMs = 1;
 * @return {number}
 */
proto.sense.TimeRange.prototype.getFromepochms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.TimeRange} returns this
 */
proto.sense.TimeRange.prototype.setFromepochms = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 toEpochMs = 2;
 * @return {number}
 */
proto.sense.TimeRange.prototype.getToepochms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.TimeRange} returns this
 */
proto.sense.TimeRange.prototype.setToepochms = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sense.ItemQuery.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.sense.ItemQuery.KeylistCase = {
  KEYLIST_NOT_SET: 0,
  KEY: 1,
  REGEX: 2
};

/**
 * @return {proto.sense.ItemQuery.KeylistCase}
 */
proto.sense.ItemQuery.prototype.getKeylistCase = function() {
  return /** @type {proto.sense.ItemQuery.KeylistCase} */(jspb.Message.computeOneofCase(this, proto.sense.ItemQuery.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.ItemQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.ItemQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.ItemQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.ItemQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    regex: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timerange: (f = msg.getTimerange()) && proto.sense.TimeRange.toObject(includeInstance, f),
    vendor: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pb_interface: jspb.Message.getFieldWithDefault(msg, 5, ""),
    excludenodetection: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    pagenum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    itemperpage: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ascorder: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.ItemQuery}
 */
proto.sense.ItemQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.ItemQuery;
  return proto.sense.ItemQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.ItemQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.ItemQuery}
 */
proto.sense.ItemQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    case 3:
      var value = new proto.sense.TimeRange;
      reader.readMessage(value,proto.sense.TimeRange.deserializeBinaryFromReader);
      msg.setTimerange(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterface(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExcludenodetection(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPagenum(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setItemperpage(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAscorder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.ItemQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.ItemQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.ItemQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.ItemQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimerange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sense.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getVendor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInterface();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExcludenodetection();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPagenum();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getItemperpage();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getAscorder();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.sense.ItemQuery.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setKey = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.sense.ItemQuery.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.clearKey = function() {
  return jspb.Message.setOneofField(this, 1, proto.sense.ItemQuery.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.ItemQuery.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string regex = 2;
 * @return {string}
 */
proto.sense.ItemQuery.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setRegex = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.sense.ItemQuery.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.clearRegex = function() {
  return jspb.Message.setOneofField(this, 2, proto.sense.ItemQuery.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.ItemQuery.prototype.hasRegex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimeRange timeRange = 3;
 * @return {?proto.sense.TimeRange}
 */
proto.sense.ItemQuery.prototype.getTimerange = function() {
  return /** @type{?proto.sense.TimeRange} */ (
    jspb.Message.getWrapperField(this, proto.sense.TimeRange, 3));
};


/**
 * @param {?proto.sense.TimeRange|undefined} value
 * @return {!proto.sense.ItemQuery} returns this
*/
proto.sense.ItemQuery.prototype.setTimerange = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.clearTimerange = function() {
  return this.setTimerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.ItemQuery.prototype.hasTimerange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string vendor = 4;
 * @return {string}
 */
proto.sense.ItemQuery.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setVendor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string interface = 5;
 * @return {string}
 */
proto.sense.ItemQuery.prototype.getInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setInterface = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool excludeNoDetection = 6;
 * @return {boolean}
 */
proto.sense.ItemQuery.prototype.getExcludenodetection = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setExcludenodetection = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint32 pageNum = 7;
 * @return {number}
 */
proto.sense.ItemQuery.prototype.getPagenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setPagenum = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 itemPerPage = 8;
 * @return {number}
 */
proto.sense.ItemQuery.prototype.getItemperpage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setItemperpage = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool ascOrder = 9;
 * @return {boolean}
 */
proto.sense.ItemQuery.prototype.getAscorder = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sense.ItemQuery} returns this
 */
proto.sense.ItemQuery.prototype.setAscorder = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.WiFiFrameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.WiFiFrameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.WiFiFrameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFrameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.sense.ItemQuery.toObject(includeInstance, f),
    frame: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ssid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sortkey: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.WiFiFrameQuery}
 */
proto.sense.WiFiFrameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.WiFiFrameQuery;
  return proto.sense.WiFiFrameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.WiFiFrameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.WiFiFrameQuery}
 */
proto.sense.WiFiFrameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.ItemQuery;
      reader.readMessage(value,proto.sense.ItemQuery.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 2:
      var value = /** @type {!proto.sense.WiFiFrameQuery.FrameType} */ (reader.readEnum());
      msg.setFrame(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRssi(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 5:
      var value = /** @type {!proto.sense.WiFiFrameQuery.SortKey} */ (reader.readEnum());
      msg.setSortkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.WiFiFrameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.WiFiFrameQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.WiFiFrameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.WiFiFrameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.ItemQuery.serializeBinaryToWriter
    );
  }
  f = message.getFrame();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSortkey();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.WiFiFrameQuery.FrameType = {
  UNKNOWN: 0,
  MGMT: 1,
  CTRL: 2,
  DATA: 3,
  RTS: 4,
  CTS: 5,
  ACK: 6,
  OTHER: 7
};

/**
 * @enum {number}
 */
proto.sense.WiFiFrameQuery.SortKey = {
  DEFAULT: 0,
  MAC: 1,
  TIME: 2,
  VENDOR: 3,
  FRAME: 4,
  RSSI: 5,
  SSID: 6
};

/**
 * optional ItemQuery item = 1;
 * @return {?proto.sense.ItemQuery}
 */
proto.sense.WiFiFrameQuery.prototype.getItem = function() {
  return /** @type{?proto.sense.ItemQuery} */ (
    jspb.Message.getWrapperField(this, proto.sense.ItemQuery, 1));
};


/**
 * @param {?proto.sense.ItemQuery|undefined} value
 * @return {!proto.sense.WiFiFrameQuery} returns this
*/
proto.sense.WiFiFrameQuery.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.WiFiFrameQuery} returns this
 */
proto.sense.WiFiFrameQuery.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.WiFiFrameQuery.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FrameType frame = 2;
 * @return {!proto.sense.WiFiFrameQuery.FrameType}
 */
proto.sense.WiFiFrameQuery.prototype.getFrame = function() {
  return /** @type {!proto.sense.WiFiFrameQuery.FrameType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.sense.WiFiFrameQuery.FrameType} value
 * @return {!proto.sense.WiFiFrameQuery} returns this
 */
proto.sense.WiFiFrameQuery.prototype.setFrame = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 rssi = 3;
 * @return {number}
 */
proto.sense.WiFiFrameQuery.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sense.WiFiFrameQuery} returns this
 */
proto.sense.WiFiFrameQuery.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ssid = 4;
 * @return {string}
 */
proto.sense.WiFiFrameQuery.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.WiFiFrameQuery} returns this
 */
proto.sense.WiFiFrameQuery.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SortKey sortKey = 5;
 * @return {!proto.sense.WiFiFrameQuery.SortKey}
 */
proto.sense.WiFiFrameQuery.prototype.getSortkey = function() {
  return /** @type {!proto.sense.WiFiFrameQuery.SortKey} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.sense.WiFiFrameQuery.SortKey} value
 * @return {!proto.sense.WiFiFrameQuery} returns this
 */
proto.sense.WiFiFrameQuery.prototype.setSortkey = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.APQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.APQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.APQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.APQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.sense.ItemQuery.toObject(includeInstance, f),
    ssid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sortkey: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.APQuery}
 */
proto.sense.APQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.APQuery;
  return proto.sense.APQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.APQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.APQuery}
 */
proto.sense.APQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.ItemQuery;
      reader.readMessage(value,proto.sense.ItemQuery.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 3:
      var value = /** @type {!proto.sense.APQuery.SortKey} */ (reader.readEnum());
      msg.setSortkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.APQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.APQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.APQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.APQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.ItemQuery.serializeBinaryToWriter
    );
  }
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSortkey();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.APQuery.SortKey = {
  DEFAULT: 0,
  SSID: 1,
  TIME: 2
};

/**
 * optional ItemQuery item = 1;
 * @return {?proto.sense.ItemQuery}
 */
proto.sense.APQuery.prototype.getItem = function() {
  return /** @type{?proto.sense.ItemQuery} */ (
    jspb.Message.getWrapperField(this, proto.sense.ItemQuery, 1));
};


/**
 * @param {?proto.sense.ItemQuery|undefined} value
 * @return {!proto.sense.APQuery} returns this
*/
proto.sense.APQuery.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.APQuery} returns this
 */
proto.sense.APQuery.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.APQuery.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string ssid = 2;
 * @return {string}
 */
proto.sense.APQuery.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.APQuery} returns this
 */
proto.sense.APQuery.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SortKey sortKey = 3;
 * @return {!proto.sense.APQuery.SortKey}
 */
proto.sense.APQuery.prototype.getSortkey = function() {
  return /** @type {!proto.sense.APQuery.SortKey} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.sense.APQuery.SortKey} value
 * @return {!proto.sense.APQuery} returns this
 */
proto.sense.APQuery.prototype.setSortkey = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sense.BTFrameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.sense.BTFrameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sense.BTFrameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFrameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.sense.ItemQuery.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sortkey: jspb.Message.getFieldWithDefault(msg, 4, 0),
    frame: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sense.BTFrameQuery}
 */
proto.sense.BTFrameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sense.BTFrameQuery;
  return proto.sense.BTFrameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sense.BTFrameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sense.BTFrameQuery}
 */
proto.sense.BTFrameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sense.ItemQuery;
      reader.readMessage(value,proto.sense.ItemQuery.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!proto.sense.BTFrameQuery.SortKey} */ (reader.readEnum());
      msg.setSortkey(value);
      break;
    case 5:
      var value = /** @type {!proto.sense.BTFrameQuery.FrameType} */ (reader.readEnum());
      msg.setFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sense.BTFrameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sense.BTFrameQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sense.BTFrameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sense.BTFrameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sense.ItemQuery.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSortkey();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFrame();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sense.BTFrameQuery.SortKey = {
  DEFAULT: 0,
  MAC: 1,
  TIME: 2,
  VENDOR: 3,
  NAME: 4,
  TYPE: 5
};

/**
 * @enum {number}
 */
proto.sense.BTFrameQuery.FrameType = {
  UNKNOWN: 0,
  PING: 1,
  BLIND: 2
};

/**
 * optional ItemQuery item = 1;
 * @return {?proto.sense.ItemQuery}
 */
proto.sense.BTFrameQuery.prototype.getItem = function() {
  return /** @type{?proto.sense.ItemQuery} */ (
    jspb.Message.getWrapperField(this, proto.sense.ItemQuery, 1));
};


/**
 * @param {?proto.sense.ItemQuery|undefined} value
 * @return {!proto.sense.BTFrameQuery} returns this
*/
proto.sense.BTFrameQuery.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sense.BTFrameQuery} returns this
 */
proto.sense.BTFrameQuery.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sense.BTFrameQuery.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sense.BTFrameQuery.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.BTFrameQuery} returns this
 */
proto.sense.BTFrameQuery.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.sense.BTFrameQuery.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sense.BTFrameQuery} returns this
 */
proto.sense.BTFrameQuery.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SortKey sortKey = 4;
 * @return {!proto.sense.BTFrameQuery.SortKey}
 */
proto.sense.BTFrameQuery.prototype.getSortkey = function() {
  return /** @type {!proto.sense.BTFrameQuery.SortKey} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.sense.BTFrameQuery.SortKey} value
 * @return {!proto.sense.BTFrameQuery} returns this
 */
proto.sense.BTFrameQuery.prototype.setSortkey = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional FrameType frame = 5;
 * @return {!proto.sense.BTFrameQuery.FrameType}
 */
proto.sense.BTFrameQuery.prototype.getFrame = function() {
  return /** @type {!proto.sense.BTFrameQuery.FrameType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.sense.BTFrameQuery.FrameType} value
 * @return {!proto.sense.BTFrameQuery} returns this
 */
proto.sense.BTFrameQuery.prototype.setFrame = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


goog.object.extend(exports, proto.sense);
